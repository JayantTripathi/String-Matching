The Agile Methodology
	The process of software development is a complex process. Software development life cycle (SDLC) is a series of certain steps which is used during the development of any piece of software's code and it ensures that the effective software is developed. A life cycle's each phase performs a specific task and delivered output to the next phase. There are several models of software development process, which uses different approaches in tasks which is performed in different phase of the cycle. Hamed and Abushama (2013, p. 160) believe that the selection of a software development model is an important task in any software project and it has a great impact on business welfare and customer satisfaction. 
	A software life cycle model consists of different phases of a software development process, each phase is executed in different stage and it produces a deliverable input for the next phase of the life cycle. Analysis, design, code construction, testing, and maintenance are the main stages of a software development life cycle. Client requirements are translated in design diagrams, then the code is constructed according to the design diagram. At the end, the testing team checks the deliverable output of the implementation stage against client requirements. Devi (2013, p. 1) defines the traditional waterfall model as  "hard-system thinking" because developers working in this model think that requirements are well defined. The author also defines the management style of the waterfall model as "high command and control" which is a standard approach with limited amount of the user interaction (p. 3). 
	Agile methodology executes in one to four weeks long periods, which is called as a short sprint. Initially the software development team decided to implement one function. In the final stage, the deliverable code tested and the development team processes further on the basis of feedback from the customer. At every sprint, the project is evaluated and it may change the project direction to meet customer satisfaction more effectively. The customer role is very important for successful completion of the project. This role defines the requirements of the project, task's priority, and it works very closely with all software developers to implement each requirement of the system. However, most of the agile projects do not get proper user involvement because some client resides out of the country, software developers may not train properly to get out information from users. Designing, coding, and testing  are three steps of the agile software development methodology.
	Designing is the first step of a software development process used in the agile methodology. Requirement specifications which are defined in the initial phase from clients are converted into the system and software design. Hardware and system requirements are specified by the system design, and it also helps to design the system architecture which is required for software execution. The software design helps to develop attractive user friendly graphical user interface in order to access a software in real time environment. Furthermore, the interface design helps to determine the operation between different systems and it shows how users interact with a software. For example, Pressman (2001, p. 218) indicates that the software interface helps to understand a flow of the information within a system and a specific type of performance at different stage. The author also noted that the information from the class based model, the behavior model and the flow model serve basis for the component design and it transforms the structural element into a software component's procedural description (p. 218). Thus, the author concludes that software design provides the foundation for all software development activities that follows in a software development life cycle (p. 218). 
	The overall schedule of a project is very hard to make because of fluctuation in user's requirements and change in previous sprint results. Gregorio (2012, p. 2) states that the first phase of the sprint cycle is design, which consists 1-4 weeks as shown in fig 1, but it is highly dependent on the team size and may be it will vary during the project development. As shown in fig 1, after the release of every sprint cycle's output, it will review with the client's requirement and expected outcome. Furthermore, Holtzblatt (2013, para. 1) proves that the contextual design technique is performed in an iterative manner with several rounds and it ensures the right deliverable output is built. The contextual design helps designers work efficiently with developers and to gather client feedback for every iteration of the sprint cycle (Holtzblatt, 2013, para. 6).
	Aitken and Ilango (2013, p. 4754) believe that the agile software development mainly focuses on iteratively and incremental delivery of the business value. As a result, project requirements can be changed at any time by customers during the sprint cycle. The authors argue that the software development company never guarantees for the completion of all the user's requirements, but it may ready to add a client's feasible requirement immediately during the development process. Several diagrams are prepared during the designing phase of the agile model which is given as input to the coding phase to make a clear understanding of the flow of a software. Pressman (2001, p. 301) describes the entity relationship diagram which is used to show the relationship between data objects that related to each other. The author also explains that the data flow diagram shows the flow of data between data entities during the execution of the project (p. 302). For example, if the banking management system is being developed with the agile methodology than the bank manager, an account holder, and transaction are entities and the flow of data takes place between them during the execution of a system. Therefore, the diagram prepared in designing phase is utilized to construct data flow in different modules during the project development. In the last step of the design phase, a business analyst finalizes all requirements, estimate the number of iterations and the number of software developers required to complete the software development process.
	The second step used for software development process in agile methodology is codding. Software's source code is a collection of the computer instructions and it is written in a human readable format which is known as a programming language. Moreover, the source code helps to execute task which is specified in the requirements pool. In the following step, a compiler converts the source code into the machine code which is understood by a computer. The deliverable output of the design phase helps to construct the software code. Furthermore, coding is the longest phase of a software development life cycle. The software coding is very important phase of a software development process because software developers write code files in order to fulfill client requirements. 
	The extreme programing method is a one of the programing method use in the agile software development. It helps to improve the quality of software and responsive nature for accepting the changing of customer requirements. Pair programing is a most significant element use in the extreme programing method,  in which two programer develops code together at a single workstation. One of the programer writes a code line with the help of input devices, while another programmer has analyzed the code which is written by first programmer. In addition, both programmers can switch their role frequently. The pair programing technique improves the quality of code and the productivity of an organization. Furthermore, the pair programing technique increases the knowledge of both programers because each one learns specialized knowledge from another one, so its improve the programer's skill. On the other hand, if the chemistry between both programers does not match, then its cause a endless frustration between them. In addition, some programmers like to code alone and they do not like interference of others, so for them the pair programming is not a feasible way. 
	The second programming methodology in an agile modal is the feature driven development (FDD).  As the name suggests features are important in the FDD, for instance, calculate the total sale, validate the user password, and authorize a user for money transaction are important features in the super market's software. FDD is useful for the larger team's project because the project manager allocates different tasks and roles in a software development team and developers complete project's requirements in incremental and iterative way. Livermore (2007, p. 83) illustrates that FDD can use for a bank project because its required iterative development of  the banking system which is easy to implement in the FDD and it provides accurate reports on the progress. The author also discussed that FDD consists five steps in which first three steps are the development of an overall model of for an application, list out the desire features of a system, and  assignment of priority to features in order to design an implementation plan (p. 83). The fourth and fifth steps involved when the development of iteration is started. In addition, after each iteration is released, system's features are again prioritized in order to keep development continue for highest priority feature by the development team (Livermore, 2007, p. 83). 
	Testing is the third step of a software development process used in the agile methodology. Testing is carried out after completion of each phase of a software development process to complete user's requirements at intervals in certain pace. Huston (2014, para 2) claims that a software developer and a tester are two sides of a single coin and they meet together every day to compare their notes. The author also believes that in order to save time and money, an organization can merge both testing and developing function (para 4). As a result, a software developer thinks like a tester, so he continuously checks own code in order to avoid potential error in the software while testers are encouraged to think more likely as developers. Therefore, the continuous collaboration requires between developers and testers throughout a software development cycle while it is not shown in the traditional waterfall model. Thus, an organization which follows the agile approach, everyone works together without thinking of individual role, they just focus on a single ultimate goal which is a software product with high quality. 
	Collins, Macedo, Maia, and Dias-Neto (2012, p. 190) are experimented an agile method in the distributed software development (DSD) process. In this experiment, there are 6 professionals in the testing team in which 2 testers are working full time at the same physical place of organization while 4 testers are working part time at geographically distributed sites. Because the testing team is geographically distributed, A DSD environment characteristics are used in the planning of the testing process. Furthermore, authors define four tools in order to access project information between all testers which includes testlink, mantis bug tracker, fire scrum, and subversion (Collins, Macedo, Maia, & Dias-Neto, 2012, p. 192). The testlink is used to write test cases, manage test plans and report test execution, it also used as an organizer and editor of test cases which store all test case report information (Collins, Macedo, Maia, & Dias-Neto, 2012, p. 192). The mantis bug tracker used to store information of bugs and defects which are found  by a tester and it sends to developers for solving bugs. Moreover, authors explain the fire scrum is used to define tasks for every sprint in a project, the subversion is used to share and manage code files between a testing team and a developing team (p. 192). 
	There are two types of methods used for software testing, which include black-box testing and white-box testing. In the black-box testing, a tester examines application's functionalities without having information of internal structure or working. In this test, a tester enters input values from the user interface, then he examines output without knowing internal operation of a system. Pressman (2001, p. 463) defines the black box-testing as the equivalence partitioning in which program is divided into different classes who has a same characteristic. A single class discovers a number of code errors while it might require several test cases to find out every error in a small piece of code. However, in the white-box testing, a tester prepares test cases for a software in order to check the internal logic and the code structure. White-box testing, also known as glass box testing or structural testing. In order to do white-box testing, the tester should have internal knowledge of code structure of programing language use in source code files and he needs to identify which piece of code working inappropriate. The author concludes that a software developer should use white -box testing at least once to ensure that all branches and conditions are executed correctly in the loop (p. 472). 
	In conclusion, the agile methodology use for the software development consists three steps which include designing, coding, and testing. The agile methodology is a tight framework in which all the phases of  a software development life cycle closely connected with each other in every iteration. Nowadays, most of the IT organization like to prefer an agile approach because as an initial stage client only gives abstract details of a project and later on he will change or enhance their requirements. Furthermore, after completion of every iteration the software company presents software's demo to customers and get feedback from them and satisfy maximum requirements of the client. However, all these characteristics are not sufficient for developing efficient and effective a software. Therefore, the traditional approach and the agile methodology will be integrated for companies in which teams are geographically distributed, belongs from diverse cultures and has different experiences. In addition, Kohlbacher, Stelzmann, and Maierhofer (2011, p. 168) concludes that the scope of project will be incorporated in future research and the links between requirements change, agile practice, and satisfaction of the client will be compared in small versus large softare develpoment projects. 	
The Agile Methodology
	The process of software development is a complex process. Software development life cycle (SDLC) is a series of certain steps which is used during the development of any piece of software's code and it ensures that the effective software is developed. A life cycle's each phase performs a specific task and delivered output to the next phase. There are several models of software development process, which uses different approaches in tasks which is performed in different phase of the cycle. Hamed and Abushama (2013, p. 160) believe that the selection of a software development model is an important task in any software project and it has a great impact on business welfare and customer satisfaction. 
	A software life cycle model consists of different phases of a software development process, each phase is executed in different stage and it produces a deliverable input for the next phase of the life cycle. Analysis, design, code construction, testing, and maintenance are the main stages of a software development life cycle. Client requirements are translated in design diagrams, then the code is constructed according to the design diagram. At the end, the testing team checks the deliverable output of the implementation stage against client requirements. Devi (2013, p. 1) defines the traditional waterfall model as  "hard-system thinking" because developers working in this model think that requirements are well defined. The author also defines the management style of the waterfall model as "high command and control" which is a standard approach with limited amount of the user interaction (p. 3). 
	Agile methodology executes in one to four weeks long periods, which is called as a short sprint. Initially the software development team decided to implement one function. In the final stage, the deliverable code tested and the development team processes further on the basis of feedback from the customer. At every sprint, the project is evaluated and it may change the project direction to meet customer satisfaction more effectively. The customer role is very important for successful completion of the project. This role defines the requirements of the project, task's priority, and it works very closely with all software developers to implement each requirement of the system. However, most of the agile projects do not get proper user involvement because some client resides out of the country, software developers may not train properly to get out information from users. Designing, coding, and testing  are three steps of the agile software development methodology.
	Designing is the first step of a software development process used in the agile methodology. Requirement specifications which are defined in the initial phase from clients are converted into the system and software design. Hardware and system requirements are specified by the system design, and it also helps to design the system architecture which is required for software execution. The software design helps to develop attractive user friendly graphical user interface in order to access a software in real time environment. Furthermore, the interface design helps to determine the operation between different systems and it shows how users interact with a software. For example, Pressman (2001, p. 218) indicates that the software interface helps to understand a flow of the information within a system and a specific type of performance at different stage. The author also noted that the information from the class based model, the behavior model and the flow model serve basis for the component design and it transforms the structural element into a software component's procedural description (p. 218). Thus, the author concludes that software design provides the foundation for all software development activities that follows in a software development life cycle (p. 218). 
	The overall schedule of a project is very hard to make because of fluctuation in user's requirements and change in previous sprint results. Gregorio (2012, p. 2) states that the first phase of the sprint cycle is design, which consists 1-4 weeks as shown in fig 1, but it is highly dependent on the team size and may be it will vary during the project development. As shown in fig 1, after the release of every sprint cycle's output, it will review with the client's requirement and expected outcome. Furthermore, Holtzblatt (2013, para. 1) proves that the contextual design technique is performed in an iterative manner with several rounds and it ensures the right deliverable output is built. The contextual design helps designers work efficiently with developers and to gather client feedback for every iteration of the sprint cycle (Holtzblatt, 2013, para. 6).
	Aitken and Ilango (2013, p. 4754) believe that the agile software development mainly focuses on iteratively and incremental delivery of the business value. As a result, project requirements can be changed at any time by customers during the sprint cycle. The authors argue that the software development company never guarantees for the completion of all the user's requirements, but it may ready to add a client's feasible requirement immediately during the development process. Several diagrams are prepared during the designing phase of the agile model which is given as input to the coding phase to make a clear understanding of the flow of a software. Pressman (2001, p. 301) describes the entity relationship diagram which is used to show the relationship between data objects that related to each other. The author also explains that the data flow diagram shows the flow of data between data entities during the execution of the project (p. 302). For example, if the banking management system is being developed with the agile methodology than the bank manager, an account holder, and transaction are entities and the flow of data takes place between them during the execution of a system. Therefore, the diagram prepared in designing phase is utilized to construct data flow in different modules during the project development. In the last step of the design phase, a business analyst finalizes all requirements, estimate the number of iterations and the number of software developers required to complete the software development process.
	The second step used for software development process in agile methodology is codding. Software's source code is a collection of the computer instructions and it is written in a human readable format which is known as a programming language. Moreover, the source code helps to execute task which is specified in the requirements pool. In the following step, a compiler converts the source code into the machine code which is understood by a computer. The deliverable output of the design phase helps to construct the software code. Furthermore, coding is the longest phase of a software development life cycle. The software coding is very important phase of a software development process because software developers write code files in order to fulfill client requirements. 
	The extreme programing method is a one of the programing method use in the agile software development. It helps to improve the quality of software and responsive nature for accepting the changing of customer requirements. Pair programing is a most significant element use in the extreme programing method,  in which two programer develops code together at a single workstation. One of the programer writes a code line with the help of input devices, while another programmer has analyzed the code which is written by first programmer. In addition, both programmers can switch their role frequently. The pair programing technique improves the quality of code and the productivity of an organization. Furthermore, the pair programing technique increases the knowledge of both programers because each one learns specialized knowledge from another one, so its improve the programer's skill. On the other hand, if the chemistry between both programers does not match, then its cause a endless frustration between them. In addition, some programmers like to code alone and they do not like interference of others, so for them the pair programming is not a feasible way. 
	The second programming methodology in an agile modal is the feature driven development (FDD).  As the name suggests features are important in the FDD, for instance, calculate the total sale, validate the user password, and authorize a user for money transaction are important features in the super market's software. FDD is useful for the larger team's project because the project manager allocates different tasks and roles in a software development team and developers complete project's requirements in incremental and iterative way. Livermore (2007, p. 83) illustrates that FDD can use for a bank project because its required iterative development of  the banking system which is easy to implement in the FDD and it provides accurate reports on the progress. The author also discussed that FDD consists five steps in which first three steps are the development of an overall model of for an application, list out the desire features of a system, and  assignment of priority to features in order to design an implementation plan (p. 83). The fourth and fifth steps involved when the development of iteration is started. In addition, after each iteration is released, system's features are again prioritized in order to keep development continue for highest priority feature by the development team (Livermore, 2007, p. 83). 
	Testing is the third step of a software development process used in the agile methodology. Testing is carried out after completion of each phase of a software development process to complete user's requirements at intervals in certain pace. Huston (2014, para 2) claims that a software developer and a tester are two sides of a single coin and they meet together every day to compare their notes. The author also believes that in order to save time and money, an organization can merge both testing and developing function (para 4). As a result, a software developer thinks like a tester, so he continuously checks own code in order to avoid potential error in the software while testers are encouraged to think more likely as developers. Therefore, the continuous collaboration requires between developers and testers throughout a software development cycle while it is not shown in the traditional waterfall model. Thus, an organization which follows the agile approach, everyone works together without thinking of individual role, they just focus on a single ultimate goal which is a software product with high quality. 
	Collins, Macedo, Maia, and Dias-Neto (2012, p. 190) are experimented an agile method in the distributed software development (DSD) process. In this experiment, there are 6 professionals in the testing team in which 2 testers are working full time at the same physical place of organization while 4 testers are working part time at geographically distributed sites. Because the testing team is geographically distributed, A DSD environment characteristics are used in the planning of the testing process. Furthermore, authors define four tools in order to access project information between all testers which includes testlink, mantis bug tracker, fire scrum, and subversion (Collins, Macedo, Maia, & Dias-Neto, 2012, p. 192). The testlink is used to write test cases, manage test plans and report test execution, it also used as an organizer and editor of test cases which store all test case report information (Collins, Macedo, Maia, & Dias-Neto, 2012, p. 192). The mantis bug tracker used to store information of bugs and defects which are found  by a tester and it sends to developers for solving bugs. Moreover, authors explain the fire scrum is used to define tasks for every sprint in a project, the subversion is used to share and manage code files between a testing team and a developing team (p. 192). 
	There are two types of methods used for software testing, which include black-box testing and white-box testing. In the black-box testing, a tester examines application's functionalities without having information of internal structure or working. In this test, a tester enters input values from the user interface, then he examines output without knowing internal operation of a system. Pressman (2001, p. 463) defines the black box-testing as the equivalence partitioning in which program is divided into different classes who has a same characteristic. A single class discovers a number of code errors while it might require several test cases to find out every error in a small piece of code. However, in the white-box testing, a tester prepares test cases for a software in order to check the internal logic and the code structure. White-box testing, also known as glass box testing or structural testing. In order to do white-box testing, the tester should have internal knowledge of code structure of programing language use in source code files and he needs to identify which piece of code working inappropriate. The author concludes that a software developer should use white -box testing at least once to ensure that all branches and conditions are executed correctly in the loop (p. 472). 
	In conclusion, the agile methodology use for the software development consists three steps which include designing, coding, and testing. The agile methodology is a tight framework in which all the phases of  a software development life cycle closely connected with each other in every iteration. Nowadays, most of the IT organization like to prefer an agile approach because as an initial stage client only gives abstract details of a project and later on he will change or enhance their requirements. Furthermore, after completion of every iteration the software company presents software's demo to customers and get feedback from them and satisfy maximum requirements of the client. However, all these characteristics are not sufficient for developing efficient and effective a software. Therefore, the traditional approach and the agile methodology will be integrated for companies in which teams are geographically distributed, belongs from diverse cultures and has different experiences. In addition, Kohlbacher, Stelzmann, and Maierhofer (2011, p. 168) concludes that the scope of project will be incorporated in future research and the links between requirements change, agile practice, and satisfaction of the client will be compared in small versus large softare develpoment projects. 	
The Agile Methodology
	The process of software development is a complex process. Software development life cycle (SDLC) is a series of certain steps which is used during the development of any piece of software's code and it ensures that the effective software is developed. A life cycle's each phase performs a specific task and delivered output to the next phase. There are several models of software development process, which uses different approaches in tasks which is performed in different phase of the cycle. Hamed and Abushama (2013, p. 160) believe that the selection of a software development model is an important task in any software project and it has a great impact on business welfare and customer satisfaction. 
	A software life cycle model consists of different phases of a software development process, each phase is executed in different stage and it produces a deliverable input for the next phase of the life cycle. Analysis, design, code construction, testing, and maintenance are the main stages of a software development life cycle. Client requirements are translated in design diagrams, then the code is constructed according to the design diagram. At the end, the testing team checks the deliverable output of the implementation stage against client requirements. Devi (2013, p. 1) defines the traditional waterfall model as  "hard-system thinking" because developers working in this model think that requirements are well defined. The author also defines the management style of the waterfall model as "high command and control" which is a standard approach with limited amount of the user interaction (p. 3). 
	Agile methodology executes in one to four weeks long periods, which is called as a short sprint. Initially the software development team decided to implement one function. In the final stage, the deliverable code tested and the development team processes further on the basis of feedback from the customer. At every sprint, the project is evaluated and it may change the project direction to meet customer satisfaction more effectively. The customer role is very important for successful completion of the project. This role defines the requirements of the project, task's priority, and it works very closely with all software developers to implement each requirement of the system. However, most of the agile projects do not get proper user involvement because some client resides out of the country, software developers may not train properly to get out information from users. Designing, coding, and testing  are three steps of the agile software development methodology.
The Agile Methodology
	The process of software development is a complex process. Software development life cycle (SDLC) is a series of certain steps which is used during the development of any piece of software's code and it ensures that the effective software is developed. A life cycle's each phase performs a specific task and delivered output to the next phase. There are several models of software development process, which uses different approaches in tasks which is performed in different phase of the cycle. Hamed and Abushama (2013, p. 160) believe that the selection of a software development model is an important task in any software project and it has a great impact on business welfare and customer satisfaction. 
	A software life cycle model consists of different phases of a software development process, each phase is executed in different stage and it produces a deliverable input for the next phase of the life cycle. Analysis, design, code construction, testing, and maintenance are the main stages of a software development life cycle. Client requirements are translated in design diagrams, then the code is constructed according to the design diagram. At the end, the testing team checks the deliverable output of the implementation stage against client requirements. Devi (2013, p. 1) defines the traditional waterfall model as  "hard-system thinking" because developers working in this model think that requirements are well defined. The author also defines the management style of the waterfall model as "high command and control" which is a standard approach with limited amount of the user interaction (p. 3). 
	Agile methodology executes in one to four weeks long periods, which is called as a short sprint. Initially the software development team decided to implement one function. In the final stage, the deliverable code tested and the development team processes further on the basis of feedback from the customer. At every sprint, the project is evaluated and it may change the project direction to meet customer satisfaction more effectively. The customer role is very important for successful completion of the project. This role defines the requirements of the project, task's priority, and it works very closely with all software developers to implement each requirement of the system. However, most of the agile projects do not get proper user involvement because some client resides out of the country, software developers may not train properly to get out information from users. Designing, coding, and testing  are three steps of the agile software development methodology.
	Designing is the first step of a software development process used in the agile methodology. Requirement specifications which are defined in the initial phase from clients are converted into the system and software design. Hardware and system requirements are specified by the system design, and it also helps to design the system architecture which is required for software execution. The software design helps to develop attractive user friendly graphical user interface in order to access a software in real time environment. Furthermore, the interface design helps to determine the operation between different systems and it shows how users interact with a software. For example, Pressman (2001, p. 218) indicates that the software interface helps to understand a flow of the information within a system and a specific type of performance at different stage. The author also noted that the information from the class based model, the behavior model and the flow model serve basis for the component design and it transforms the structural element into a software component's procedural description (p. 218). Thus, the author concludes that software design provides the foundation for all software development activities that follows in a software development life cycle (p. 218). 
	The overall schedule of a project is very hard to make because of fluctuation in user's requirements and change in previous sprint results. Gregorio (2012, p. 2) states that the first phase of the sprint cycle is design, which consists 1-4 weeks as shown in fig 1, but it is highly dependent on the team size and may be it will vary during the project development. As shown in fig 1, after the release of every sprint cycle's output, it will review with the client's requirement and expected outcome. Furthermore, Holtzblatt (2013, para. 1) proves that the contextual design technique is performed in an iterative manner with several rounds and it ensures the right deliverable output is built. The contextual design helps designers work efficiently with developers and to gather client feedback for every iteration of the sprint cycle (Holtzblatt, 2013, para. 6).
	Aitken and Ilango (2013, p. 4754) believe that the agile software development mainly focuses on iteratively and incremental delivery of the business value. As a result, project requirements can be changed at any time by customers during the sprint cycle. The authors argue that the software development company never guarantees for the completion of all the user's requirements, but it may ready to add a client's feasible requirement immediately during the development process. Several diagrams are prepared during the designing phase of the agile model which is given as input to the coding phase to make a clear understanding of the flow of a software. Pressman (2001, p. 301) describes the entity relationship diagram which is used to show the relationship between data objects that related to each other. The author also explains that the data flow diagram shows the flow of data between data entities during the execution of the project (p. 302). For example, if the banking management system is being developed with the agile methodology than the bank manager, an account holder, and transaction are entities and the flow of data takes place between them during the execution of a system. Therefore, the diagram prepared in designing phase is utilized to construct data flow in different modules during the project development. In the last step of the design phase, a business analyst finalizes all requirements, estimate the number of iterations and the number of software developers required to complete the software development process.
	The second step used for software development process in agile methodology is codding. Software's source code is a collection of the computer instructions and it is written in a human readable format which is known as a programming language. Moreover, the source code helps to execute task which is specified in the requirements pool. In the following step, a compiler converts the source code into the machine code which is understood by a computer. The deliverable output of the design phase helps to construct the software code. Furthermore, coding is the longest phase of a software development life cycle. The software coding is very important phase of a software development process because software developers write code files in order to fulfill client requirements. 
	The extreme programing method is a one of the programing method use in the agile software development. It helps to improve the quality of software and responsive nature for accepting the changing of customer requirements. Pair programing is a most significant element use in the extreme programing method,  in which two programer develops code together at a single workstation. One of the programer writes a code line with the help of input devices, while another programmer has analyzed the code which is written by first programmer. In addition, both programmers can switch their role frequently. The pair programing technique improves the quality of code and the productivity of an organization. Furthermore, the pair programing technique increases the knowledge of both programers because each one learns specialized knowledge from another one, so its improve the programer's skill. On the other hand, if the chemistry between both programers does not match, then its cause a endless frustration between them. In addition, some programmers like to code alone and they do not like interference of others, so for them the pair programming is not a feasible way. 
	The second programming methodology in an agile modal is the feature driven development (FDD).  As the name suggests features are important in the FDD, for instance, calculate the total sale, validate the user password, and authorize a user for money transaction are important features in the super market's software. FDD is useful for the larger team's project because the project manager allocates different tasks and roles in a software development team and developers complete project's requirements in incremental and iterative way. Livermore (2007, p. 83) illustrates that FDD can use for a bank project because its required iterative development of  the banking system which is easy to implement in the FDD and it provides accurate reports on the progress. The author also discussed that FDD consists five steps in which first three steps are the development of an overall model of for an application, list out the desire features of a system, and  assignment of priority to features in order to design an implementation plan (p. 83). The fourth and fifth steps involved when the development of iteration is started. In addition, after each iteration is released, system's features are again prioritized in order to keep development continue for highest priority feature by the development team (Livermore, 2007, p. 83). 
	Testing is the third step of a software development process used in the agile methodology. Testing is carried out after completion of each phase of a software development process to complete user's requirements at intervals in certain pace. Huston (2014, para 2) claims that a software developer and a tester are two sides of a single coin and they meet together every day to compare their notes. The author also believes that in order to save time and money, an organization can merge both testing and developing function (para 4). As a result, a software developer thinks like a tester, so he continuously checks own code in order to avoid potential error in the software while testers are encouraged to think more likely as developers. Therefore, the continuous collaboration requires between developers and testers throughout a software development cycle while it is not shown in the traditional waterfall model. Thus, an organization which follows the agile approach, everyone works together without thinking of individual role, they just focus on a single ultimate goal which is a software product with high quality. 
	Collins, Macedo, Maia, and Dias-Neto (2012, p. 190) are experimented an agile method in the distributed software development (DSD) process. In this experiment, there are 6 professionals in the testing team in which 2 testers are working full time at the same physical place of organization while 4 testers are working part time at geographically distributed sites. Because the testing team is geographically distributed, A DSD environment characteristics are used in the planning of the testing process. Furthermore, authors define four tools in order to access project information between all testers which includes testlink, mantis bug tracker, fire scrum, and subversion (Collins, Macedo, Maia, & Dias-Neto, 2012, p. 192). The testlink is used to write test cases, manage test plans and report test execution, it also used as an organizer and editor of test cases which store all test case report information (Collins, Macedo, Maia, & Dias-Neto, 2012, p. 192). The mantis bug tracker used to store information of bugs and defects which are found  by a tester and it sends to developers for solving bugs. Moreover, authors explain the fire scrum is used to define tasks for every sprint in a project, the subversion is used to share and manage code files between a testing team and a developing team (p. 192). 
	There are two types of methods used for software testing, which include black-box testing and white-box testing. In the black-box testing, a tester examines application's functionalities without having information of internal structure or working. In this test, a tester enters input values from the user interface, then he examines output without knowing internal operation of a system. Pressman (2001, p. 463) defines the black box-testing as the equivalence partitioning in which program is divided into different classes who has a same characteristic. A single class discovers a number of code errors while it might require several test cases to find out every error in a small piece of code. However, in the white-box testing, a tester prepares test cases for a software in order to check the internal logic and the code structure. White-box testing, also known as glass box testing or structural testing. In order to do white-box testing, the tester should have internal knowledge of code structure of programing language use in source code files and he needs to identify which piece of code working inappropriate. The author concludes that a software developer should use white -box testing at least once to ensure that all branches and conditions are executed correctly in the loop (p. 472). 
	In conclusion, the agile methodology use for the software development consists three steps which include designing, coding, and testing. The agile methodology is a tight framework in which all the phases of  a software development life cycle closely connected with each other in every iteration. Nowadays, most of the IT organization like to prefer an agile approach because as an initial stage client only gives abstract details of a project and later on he will change or enhance their requirements. Furthermore, after completion of every iteration the software company presents software's demo to customers and get feedback from them and satisfy maximum requirements of the client. However, all these characteristics are not sufficient for developing efficient and effective a software. Therefore, the traditional approach and the agile methodology will be integrated for companies in which teams are geographically distributed, belongs from diverse cultures and has different experiences. In addition, Kohlbacher, Stelzmann, and Maierhofer (2011, p. 168) concludes that the scope of project will be incorporated in future research and the links between requirements change, agile practice, and satisfaction of the client will be compared in small versus large softare develpoment projects. 	
The Agile Methodology
	The process of software development is a complex process. Software development life cycle (SDLC) is a series of certain steps which is used during the development of any piece of software's code and it ensures that the effective software is developed. A life cycle's each phase performs a specific task and delivered output to the next phase. There are several models of software development process, which uses different approaches in tasks which is performed in different phase of the cycle. Hamed and Abushama (2013, p. 160) believe that the selection of a software development model is an important task in any software project and it has a great impact on business welfare and customer satisfaction. 
	A software life cycle model consists of different phases of a software development process, each phase is executed in different stage and it produces a deliverable input for the next phase of the life cycle. Analysis, design, code construction, testing, and maintenance are the main stages of a software development life cycle. Client requirements are translated in design diagrams, then the code is constructed according to the design diagram. At the end, the testing team checks the deliverable output of the implementation stage against client requirements. Devi (2013, p. 1) defines the traditional waterfall model as  "hard-system thinking" because developers working in this model think that requirements are well defined. The author also defines the management style of the waterfall model as "high command and control" which is a standard approach with limited amount of the user interaction (p. 3). 
	Agile methodology executes in one to four weeks long periods, which is called as a short sprint. Initially the software development team decided to implement one function. In the final stage, the deliverable code tested and the development team processes further on the basis of feedback from the customer. At every sprint, the project is evaluated and it may change the project direction to meet customer satisfaction more effectively. The customer role is very important for successful completion of the project. This role defines the requirements of the project, task's priority, and it works very closely with all software developers to implement each requirement of the system. However, most of the agile projects do not get proper user involvement because some client resides out of the country, software developers may not train properly to get out information from users. Designing, coding, and testing  are three steps of the agile software development methodology.
	Designing is the first step of a software development process used in the agile methodology. Requirement specifications which are defined in the initial phase from clients are converted into the system and software design. Hardware and system requirements are specified by the system design, and it also helps to design the system architecture which is required for software execution. The software design helps to develop attractive user friendly graphical user interface in order to access a software in real time environment. Furthermore, the interface design helps to determine the operation between different systems and it shows how users interact with a software. For example, Pressman (2001, p. 218) indicates that the software interface helps to understand a flow of the information within a system and a specific type of performance at different stage. The author also noted that the information from the class based model, the behavior model and the flow model serve basis for the component design and it transforms the structural element into a software component's procedural description (p. 218). Thus, the author concludes that software design provides the foundation for all software development activities that follows in a software development life cycle (p. 218). 
	The overall schedule of a project is very hard to make because of fluctuation in user's requirements and change in previous sprint results. Gregorio (2012, p. 2) states that the first phase of the sprint cycle is design, which consists 1-4 weeks as shown in fig 1, but it is highly dependent on the team size and may be it will vary during the project development. As shown in fig 1, after the release of every sprint cycle's output, it will review with the client's requirement and expected outcome. Furthermore, Holtzblatt (2013, para. 1) proves that the contextual design technique is performed in an iterative manner with several rounds and it ensures the right deliverable output is built. The contextual design helps designers work efficiently with developers and to gather client feedback for every iteration of the sprint cycle (Holtzblatt, 2013, para. 6).
	Aitken and Ilango (2013, p. 4754) believe that the agile software development mainly focuses on iteratively and incremental delivery of the business value. As a result, project requirements can be changed at any time by customers during the sprint cycle. The authors argue that the software development company never guarantees for the completion of all the user's requirements, but it may ready to add a client's feasible requirement immediately during the development process. Several diagrams are prepared during the designing phase of the agile model which is given as input to the coding phase to make a clear understanding of the flow of a software. Pressman (2001, p. 301) describes the entity relationship diagram which is used to show the relationship between data objects that related to each other. The author also explains that the data flow diagram shows the flow of data between data entities during the execution of the project (p. 302). For example, if the banking management system is being developed with the agile methodology than the bank manager, an account holder, and transaction are entities and the flow of data takes place between them during the execution of a system. Therefore, the diagram prepared in designing phase is utilized to construct data flow in different modules during the project development. In the last step of the design phase, a business analyst finalizes all requirements, estimate the number of iterations and the number of software developers required to complete the software development process.
	The second step used for software development process in agile methodology is codding. Software's source code is a collection of the computer instructions and it is written in a human readable format which is known as a programming language. Moreover, the source code helps to execute task which is specified in the requirements pool. In the following step, a compiler converts the source code into the machine code which is understood by a computer. The deliverable output of the design phase helps to construct the software code. Furthermore, coding is the longest phase of a software development life cycle. The software coding is very important phase of a software development process because software developers write code files in order to fulfill client requirements. 
	The extreme programing method is a one of the programing method use in the agile software development. It helps to improve the quality of software and responsive nature for accepting the changing of customer requirements. Pair programing is a most significant element use in the extreme programing method,  in which two programer develops code together at a single workstation. One of the programer writes a code line with the help of input devices, while another programmer has analyzed the code which is written by first programmer. In addition, both programmers can switch their role frequently. The pair programing technique improves the quality of code and the productivity of an organization. Furthermore, the pair programing technique increases the knowledge of both programers because each one learns specialized knowledge from another one, so its improve the programer's skill. On the other hand, if the chemistry between both programers does not match, then its cause a endless frustration between them. In addition, some programmers like to code alone and they do not like interference of others, so for them the pair programming is not a feasible way. 
	The second programming methodology in an agile modal is the feature driven development (FDD).  As the name suggests features are important in the FDD, for instance, calculate the total sale, validate the user password, and authorize a user for money transaction are important features in the super market's software. FDD is useful for the larger team's project because the project manager allocates different tasks and roles in a software development team and developers complete project's requirements in incremental and iterative way. Livermore (2007, p. 83) illustrates that FDD can use for a bank project because its required iterative development of  the banking system which is easy to implement in the FDD and it provides accurate reports on the progress. The author also discussed that FDD consists five steps in which first three steps are the development of an overall model of for an application, list out the desire features of a system, and  assignment of priority to features in order to design an implementation plan (p. 83). The fourth and fifth steps involved when the development of iteration is started. In addition, after each iteration is released, system's features are again prioritized in order to keep development continue for highest priority feature by the development team (Livermore, 2007, p. 83). 
	Testing is the third step of a software development process used in the agile methodology. Testing is carried out after completion of each phase of a software development process to complete user's requirements at intervals in certain pace. Huston (2014, para 2) claims that a software developer and a tester are two sides of a single coin and they meet together every day to compare their notes. The author also believes that in order to save time and money, an organization can merge both testing and developing function (para 4). As a result, a software developer thinks like a tester, so he continuously checks own code in order to avoid potential error in the software while testers are encouraged to think more likely as developers. Therefore, the continuous collaboration requires between developers and testers throughout a software development cycle while it is not shown in the traditional waterfall model. Thus, an organization which follows the agile approach, everyone works together without thinking of individual role, they just focus on a single ultimate goal which is a software product with high quality. 
	Collins, Macedo, Maia, and Dias-Neto (2012, p. 190) are experimented an agile method in the distributed software development (DSD) process. In this experiment, there are 6 professionals in the testing team in which 2 testers are working full time at the same physical place of organization while 4 testers are working part time at geographically distributed sites. Because the testing team is geographically distributed, A DSD environment characteristics are used in the planning of the testing process. Furthermore, authors define four tools in order to access project information between all testers which includes testlink, mantis bug tracker, fire scrum, and subversion (Collins, Macedo, Maia, & Dias-Neto, 2012, p. 192). The testlink is used to write test cases, manage test plans and report test execution, it also used as an organizer and editor of test cases which store all test case report information (Collins, Macedo, Maia, & Dias-Neto, 2012, p. 192). The mantis bug tracker used to store information of bugs and defects which are found  by a tester and it sends to developers for solving bugs. Moreover, authors explain the fire scrum is used to define tasks for every sprint in a project, the subversion is used to share and manage code files between a testing team and a developing team (p. 192). 
	There are two types of methods used for software testing, which include black-box testing and white-box testing. In the black-box testing, a tester examines application's functionalities without having information of internal structure or working. In this test, a tester enters input values from the user interface, then he examines output without knowing internal operation of a system. Pressman (2001, p. 463) defines the black box-testing as the equivalence partitioning in which program is divided into different classes who has a same characteristic. A single class discovers a number of code errors while it might require several test cases to find out every error in a small piece of code. However, in the white-box testing, a tester prepares test cases for a software in order to check the internal logic and the code structure. White-box testing, also known as glass box testing or structural testing. In order to do white-box testing, the tester should have internal knowledge of code structure of programing language use in source code files and he needs to identify which piece of code working inappropriate. The author concludes that a software developer should use white -box testing at least once to ensure that all branches and conditions are executed correctly in the loop (p. 472). 
	In conclusion, the agile methodology use for the software development consists three steps which include designing, coding, and testing. The agile methodology is a tight framework in which all the phases of  a software development life cycle closely connected with each other in every iteration. Nowadays, most of the IT organization like to prefer an agile approach because as an initial stage client only gives abstract details of a project and later on he will change or enhance their requirements. Furthermore, after completion of every iteration the software company presents software's demo to customers and get feedback from them and satisfy maximum requirements of the client. However, all these characteristics are not sufficient for developing efficient and effective a software. Therefore, the traditional approach and the agile methodology will be integrated for companies in which teams are geographically distributed, belongs from diverse cultures and has different experiences. In addition, Kohlbacher, Stelzmann, and Maierhofer (2011, p. 168) concludes that the scope of project will be incorporated in future research and the links between requirements change, agile practice, and satisfaction of the client will be compared in small versus large softare develpoment projects. 	
The Agile Methodology
	The process of software development is a complex process. Software development life cycle (SDLC) is a series of certain steps which is used during the development of any piece of software's code and it ensures that the effective software is developed. A life cycle's each phase performs a specific task and delivered output to the next phase. There are several models of software development process, which uses different approaches in tasks which is performed in different phase of the cycle. Hamed and Abushama (2013, p. 160) believe that the selection of a software development model is an important task in any software project and it has a great impact on business welfare and customer satisfaction. 
	A software life cycle model consists of different phases of a software development process, each phase is executed in different stage and it produces a deliverable input for the next phase of the life cycle. Analysis, design, code construction, testing, and maintenance are the main stages of a software development life cycle. Client requirements are translated in design diagrams, then the code is constructed according to the design diagram. At the end, the testing team checks the deliverable output of the implementation stage against client requirements. Devi (2013, p. 1) defines the traditional waterfall model as  "hard-system thinking" because developers working in this model think that requirements are well defined. The author also defines the management style of the waterfall model as "high command and control" which is a standard approach with limited amount of the user interaction (p. 3). 
	Agile methodology executes in one to four weeks long periods, which is called as a short sprint. Initially the software development team decided to implement one function. In the final stage, the deliverable code tested and the development team processes further on the basis of feedback from the customer. At every sprint, the project is evaluated and it may change the project direction to meet customer satisfaction more effectively. The customer role is very important for successful completion of the project. This role defines the requirements of the project, task's priority, and it works very closely with all software developers to implement each requirement of the system. However, most of the agile projects do not get proper user involvement because some client resides out of the country, software developers may not train properly to get out information from users. Designing, coding, and testing  are three steps of the agile software development methodology.


